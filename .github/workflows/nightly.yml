name: Nightly Build of Aurora Editor
on:
  schedule: ## Schedule the job to run at 12.am daily.
     - cron: '0 0 * * *'
jobs:
  build_nightly_editor:
    if: github.repository_owner == 'AuroraEditor'
    runs-on: macos-12
    timeout-minutes: 30 # If a build exceeds 30 mins, it probably isn't ever going to complete
    steps:
      - uses: actions/checkout@v3
      
      - name: "Select Xcode 14.0"
        run: sudo xcode-select -s /Applications/Xcode_14.0.app
        
        ### Certs
      - name: "Import Certificate: Development"
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.DEVELOPMENT_CERTIFICATE_DATA }}
          P12_PASSWORD: ${{ secrets.DEVELOPMENT_CERTIFICATE_PASSPHRASE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      
      - name: "Import Certificate: Distribution"
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.DISTRIBUTION_CERTIFICATE_DATA }}
          P12_PASSWORD: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSPHRASE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: "Import Certificate: Developer ID Application"
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.DEVELOPER_ID_DATA }}
          P12_PASSWORD: ${{ secrets.DEVELOPER_ID_PASSPHRASE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: "Create Release Build Archive"
        run: | 
          set -o pipefail && xcodebuild -workspace "Aurora Editor.xcworkspace" -scheme "Aurora Editor (Release)" -configuration Release archive -archivePath "builds/Aurora Editor.xcarchive" CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | xcpretty 

      - name: "Export Release Build"
        run: |
          xcrun xcodebuild -exportArchive -exportOptionsPlist .github/export.plist -archivePath "builds/Aurora Editor.xcarchive" -exportPath builds
        
      - name: Install create-dmg
        run: npm install --global create-dmg
        
      - name: Make Release Dmg
        run: create-dmg "builds/Aurora Editor.app"

      - name: "notarytool submit"
        run: xcrun notarytool submit "Aurora Editor 1.0.dmg" --apple-id "${{ secrets.APPLEID_EMAIL }}" --password "${{ secrets.APPLEID_PASSWORD }}" --team-id "4V2D72S45C" --wait
        
      # - name: "Staple Release Build"
      # run: xcrun stapler staple "Aurora Editor 1.0.dmg"
        
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.0.0
        with:
          # Artifact name
          name: AuroraEditor_Nightly # optional, default is artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: "Aurora Editor 1.0.dmg"
        
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
